# Multi-Stage Dockerfile - Optimized for size and security
# This Dockerfile demonstrates best practices for creating minimal, secure container images

# ============================================
# Stage 1: Builder Stage
# ============================================
# Purpose: Install dependencies and build the application
# This stage includes build tools and compilers that won't be in the final image

FROM python:3.11-slim AS builder

# Set working directory for build stage
WORKDIR /build

# Install build dependencies required for Python packages with C extensions
# These will NOT be in the final image
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file first (better layer caching)
# If requirements.txt doesn't change, this layer will be cached
COPY requirements.txt .

# Install Python dependencies to a specific location
# Using --prefix allows us to copy just the installed packages to the next stage
RUN pip install --no-cache-dir --prefix=/install -r requirements.txt

# Copy application source code
COPY app.py .

# ============================================
# Stage 2: Runtime Stage
# ============================================
# Purpose: Create minimal runtime image with only necessary components
# Final image size: ~145MB (vs 1.2GB for single-stage)

FROM python:3.11-alpine

# Add metadata labels for container registry
LABEL maintainer="devops@example.com"
LABEL description="Multi-stage Docker pipeline demo application"
LABEL version="1.0.0"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=5000

# Create non-root user for security best practices
# Running as root is a security risk
RUN addgroup -g 1000 appuser && \
    adduser -D -u 1000 -G appuser appuser

# Set working directory
WORKDIR /app

# Copy ONLY the installed dependencies from builder stage
# This excludes build tools, compilers, and source files
COPY --from=builder /install /usr/local

# Copy application code from builder stage
COPY --from=builder /build/app.py .

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose application port
EXPOSE 5000

# Health check to monitor container health
# Kubernetes/ECS can use this to determine if container is ready
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')" || exit 1

# Run application with gunicorn for production-ready serving
# 2 workers and 4 threads provide good balance for small applications
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--threads", "4", "--timeout", "60", "app:app"]
